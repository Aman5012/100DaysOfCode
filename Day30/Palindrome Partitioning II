132. Palindrome Partitioning II

//QUESTION LNK: https://leetcode.com/problems/palindrome-partitioning-ii/

TOPIC: DP, Recursion


CODE:

Time Complexity: O(n^3)
Space Complexity: O(n^2)


////////////////////  recursive + memoize solution  //////////////////////////

class Solution {
public:
    // Memo table to store isPalindrome results
    vector<vector<int>> isPal;

    bool isPalindrom(string &s, int i, int j) {
        if (i >= j) return true;
        if (isPal[i][j] != -1) return isPal[i][j];

        if (s[i] == s[j]) {
            return isPal[i][j] = isPalindrom(s, i + 1, j - 1);
        } else {
            return isPal[i][j] = 0;
        }
    }

    int solve(string &s, int i, int j, vector<vector<int>> &dp) {
        if (i >= j) return 0;
        if (isPalindrom(s, i, j)) return dp[i][j] = 0;
        if (dp[i][j] != -1) return dp[i][j];

        int ans = INT_MAX;

        for (int k = i; k < j; k++) {
            if (isPalindrom(s, i, k)) {  // prune bad splits
                int right = dp[k + 1][j] != -1 ? dp[k + 1][j] : solve(s, k + 1, j, dp);
                dp[k + 1][j] = right;
                ans = min(ans, 1 + right);
            }
        }

        return dp[i][j] = ans;
    }

    int minCut(string s) {
        int n = s.size();
        vector<vector<int>> dp(n, vector<int>(n, -1));
        isPal = vector<vector<int>>(n, vector<int>(n, -1));
        return solve(s, 0, n - 1, dp);
    }
};

