662. Maximum Width of Binary Tree
//QUESTION LINK: https://leetcode.com/problems/maximum-width-of-binary-tree/description/

TOPIC: Tree
Depth-First Search
Breadth-First Search
Binary Tree


CODE:
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int widthOfBinaryTree(TreeNode* root) {
        if(root==NULL) return 0;
        queue<pair<TreeNode*, long long>> q;
        q.push({root, 0});
        long long maxi=0;

        while(!q.empty()){
            int size = q.size();
            long long minIdx = q.front().second;
            long long first, last;

            for(int i=0; i<size; i++){
                auto [node, index] = q.front();
                q.pop();
                long long curIdx = index - minIdx; // to aboid over flow 
                if(i==0) first = curIdx; 
                if(i==size-1) last = curIdx; 
                if(node->left) q.push({node->left, 2*curIdx});
                if(node->right) q.push({node->right, 2*curIdx+1});
            } 
            maxi = max(maxi, last-first+1);
        }
        return (int)maxi;
    }
};
