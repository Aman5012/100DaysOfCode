930. Binary Subarrays With Sum


//QUESTION LNK: https://leetcode.com/problems/binary-subarrays-with-sum/description/

TOPIC: two pointers, Sliding Window




Time Complexity: O(n)
Space Complexity: O(1)

CODE:


#include <vector>
using namespace std;
/////////////////////////   optimal solution /////////
class Solution {
public:
    int numSubarraysWithSum(vector<int>& nums, int goal) {
        return atMost(nums, goal) - atMost(nums, goal - 1);
    }

private:
    int atMost(vector<int>& nums, int goal) {
        if (goal < 0) return 0; // If the goal is negative, no valid subarrays
        int left = 0, sum = 0, count = 0;
        for (int right = 0; right < nums.size(); ++right) {
            sum += nums[right];

            // Shrink the window until sum is at most `goal`
            while (sum > goal) {
                sum -= nums[left];
                left++;
            }

            // Count subarrays with sum at most `goal`
            count += (right - left + 1);
        }
        return count;
    }
};
