704. Binary Search
//QUESTION LNK: https://leetcode.com/problems/binary-search/

TOPIC: array, binary search


CODE:

class Solution {

Time Complexity: O(log n)
Space Complexity: O(1)

public:
    int search(vector<int>& nums, int target) {
        int n = nums.size();
        int s=0;
        int e=n-1;
        int mid= 0;

        while(s<=e){
            mid = s + (e-s)/2;
            if(nums[mid]== target){
                return mid;
            }else if(nums[mid]> target)
                e= mid-1;
            else
                s=mid+1;
        } 
        return -1;
    }
};


/////////////////////////////// recursive solution  ///////////////////
class Solution {
Time Complexity: O(log n)
Space Complexity: O(log n) 

public:
    int solve(vector<int>& nums, int s, int e, int target){
        if(s>e) return -1;
        int mid = s + (e-s)/2;
        if(nums[mid]== target){
            return mid;
        }else if(nums[mid]> target)
            return solve(nums, s, mid-1, target);
        else 
        return solve(nums, mid+1, e, target);
    }

    int search(vector<int>& nums, int target) {
        int n = nums.size();
        return solve(nums, 0, n-1, target);
    }
};
