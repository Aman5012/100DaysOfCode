3355. Zero Array Transformation I

//QUESTION LNK: https://leetcode.com/problems/zero-array-transformation-i/

TOPIC:


CODE:

Time Complexity: 
Space Complexity: 
//Approach - Straight Forward Difference Array Technique
//T.C : O(Q + n)
//S.C : O(Q + n)
class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size();

        //Step-1 Make diff array using query
        vector<int> diff(n, 0);
        for(auto &query : queries) {
            int start = query[0];
            int end   = query[1];
            int x     = 1;

            diff[start] += x;
            if(end+1 < n) {
                diff[end+1] -= x;
            }
        }

        //Step-2. Find cumulative effect on each index
        vector<int> result(n, 0);
        int cumSum = 0;
        for(int i = 0; i < n; i++) {
            cumSum += diff[i];
            result[i] = cumSum;
        }

        for(int i = 0; i < n; i++) {
            if(result[i] < nums[i]) { //nums[i] won't become 0 ever
                return false;
            }
        }

        return true;
    }
};

/// ///////////////////////////////   brute force   //////////////////////////////////

// TC; O(N * Q)
// SC: O(1)
// class Solution {
// public:
//     bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
//         int n = queries.size();
//         for(int i=0; i<n; i++){
//             int s=queries[i][0];
//             int e=queries[i][1];
//             while(s<=e){
//                 if(nums[s]==0) s++;
//                 else{
//                     nums[s]--;
//                     s++;
//                 }
//             }
//         }
//         for(int j=0; j<nums.size(); j++){
//             if(nums[j]!=0) return false;
//         }
//         return true;
//     }
// };
