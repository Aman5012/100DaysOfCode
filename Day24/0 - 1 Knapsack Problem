0 - 1 Knapsack Problem
//QUESTION LNK: https://www.geeksforgeeks.org/problems/0-1-knapsack-problem0945/1?itm_source=geeksforgeeks&itm_medium=article&itm_campaign=practice_card

TOPIC: Dynamic Programming, Algorithms


CODE:

Time Complexity: O(n.W)
Space Complexity: O(n.W)
class Solution {
  public:
    int knapsack(int W, vector<int> &val, vector<int> &wt) {
        int n = val.size();
        
        vector<vector<int>> dp(n+1, vector<int>(W+1, 0));
        
        // other method to create table
        
        // int dp[n+1][W+1];
        // for(int i=0;i<n+1; i++) dp[i][0]=0;
        // for(int j=0;j<W+1; j++) dp[0][j]=0;
        
        for(int i=1; i<=n; i++) {
            for(int w=1; w<=W; w++) {
                if(wt[i-1] <= w) {
                    dp[i][w] = max(val[i-1] + dp[i-1][w-wt[i-1]],
                                   dp[i-1][w]);
                }
                else {
                    dp[i][w] = dp[i-1][w];
                }
            }
        }
        
        return dp[n][W];
    }
};
