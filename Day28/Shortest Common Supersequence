1092. Shortest Common Supersequence 
//QUESTION LNK: https://leetcode.com/problems/shortest-common-supersequence/

TOPIC: string, DP


CODE:

Time Complexity: O(m*n)
Space Complexity: O(m*n)
class Solution {
public:

    vector<vector<int>> dp;
    // finding the common subsequence 
    void lcs(string str1, string str2, int m, int n){
        for(int i=0; i<m+1; i++){
            for(int j=0; j<n+1; j++){
                if(i==0 || j==0) dp[i][j]=0;
                else if(str1[i-1]== str2[j-1]){
                    dp[i][j]= 1+ dp[i-1][j-1];
                }
                else{
                    dp[i][j]=max(dp[i-1][j], dp[i][j-1]);
                }
            }
        }
    }
    string shortestCommonSupersequence(string str1, string str2) {
        int m=  str1.size(); 
        int n= str2.size();
        dp.assign(m+1, vector<int>(n+1, -1));

         lcs(str1, str2, m, n);

        // add the char into the ans which make sortest subseqence
        string ans="";
        int i=m;
        int j=n;

        while(i>0 && j>0){
            if(str1[i-1]== str2[j-1]){
                ans +=str1[i-1];
                j--;
                i--;
            }
            else if(dp[i-1][j]>dp[i][j-1]){
                ans += str1[i-1];
                i--;
            }
            else{
                ans +=str2[j-1];
                j--;
            }
        }

        // Add remaining characters of s1 or s2
        while(i>0){
            ans += str1[i-1];
            i--;
        }
        while(j>0){
            ans += str2[j-1];
            j--;
        }

        reverse(ans.begin(), ans.end());
        return ans;
    }
};
