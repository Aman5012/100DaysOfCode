1143. Longest Common Subsequence
//QUESTION LNK: https://leetcode.com/problems/longest-common-subsequence/

TOPIC: DP


CODE:

////////////////////////////  tabulation /////////////////////////////

// Time Complexity	O(m * n)
// Space Complexity	O(m * n)


class Solution {
public:
    vector<vector<int>> dp;

    int lcs(string& text1, string& text2, int m, int n){
        for(int i=0; i<m+1; i++){
            dp[i][0]=0;
        }
        for(int j=0;j<n+1; j++){
            dp[0][j]=0;
        }

        for(int i=1; i<m+1; i++){
            for(int j=1; j<n+1; j++){
                if(text1[i-1]==text2[j-1]){
                    dp[i][j]= 1+ dp[i-1][j-1];
                }
                else{
                    dp[i][j]= max(dp[i-1][j], dp[i][j-1]);
                }
            }
        }
        return dp[m][n];
    }

    int longestCommonSubsequence(string text1, string text2) {
        int m = text1.size();
        int n = text2.size();
        dp.assign(m + 1, vector<int>(n + 1, -1));  
        return lcs(text1, text2, m, n);
    }
};

//////////////////////////// memoization ////////////////////

// Time Complexity	O(m * n)
// Space Complexity	O(m * n) (DP table) + O(m + n) (stack)


// class Solution {
// public:
//     vector<vector<int>> dp;

//     int lcs(string& text1, string& text2, int m, int n){
//         if(m == 0 || n == 0) return 0;
//         if(dp[m][n] != -1) return dp[m][n];

//         if(text1[m - 1] == text2[n - 1])
//             return dp[m][n] = 1 + lcs(text1, text2, m - 1, n - 1);
//         else
//             return dp[m][n] = max(lcs(text1, text2, m - 1, n), lcs(text1, text2, m, n - 1));
//     }

//     int longestCommonSubsequence(string text1, string text2) {
//         int m = text1.size();
//         int n = text2.size();
//         dp.assign(m + 1, vector<int>(n + 1, -1));  // Correctly initialize the class-level dp
//         return lcs(text1, text2, m, n);
//     }
// };

/////////////////////////////////////////   recursive solution  ///////////////////////////


// Time Complexity	O(2^(m + n))
// Space Complexity	O(m + n) (stack)


// class Solution {
// public:
//     int lcs(string& text1, string& text2, int m, int n){
//         if(m < 0 || n < 0) return 0;

//         if(text1[m] == text2[n]){
//             return 1 + lcs(text1, text2, m - 1, n - 1);
//         } else {
//             return max(lcs(text1, text2, m, n - 1), lcs(text1, text2, m - 1, n));
//         }
//     } 

//     int longestCommonSubsequence(string text1, string text2) {
//         int m = text1.size();
//         int n = text2.size();
//         return lcs(text1, text2, m - 1, n - 1);
//     }
// };
