583. Delete Operation for Two Strings
//QUESTION LNK: https://leetcode.com/problems/delete-operation-for-two-strings/description/

TOPIC: String
Dynamic Programming


CODE:

Time Complexity: O(m*n)
Space Complexity: O(m*n)
class Solution {
        vector<vector<int>> dp;
        // funtion is used to count the common subsequence in the both words
    void lcs(string &word1, string &word2, int m, int n){
    for(int i = 0; i <= m; i++){
        for(int j = 0; j <= n; j++){
            if(i == 0 || j == 0) {
                dp[i][j] = 0;
            }
            else if(word1[i-1] == word2[j-1]){
                dp[i][j] = 1 + dp[i-1][j-1];
            }
            else{
                dp[i][j] = max(dp[i-1][j], dp[i][j-1]);
            }
        }
    }
}

public:
    int minDistance(string word1, string word2) {
        int m=word1.size();
        int n=word2.size();
        dp.assign(m+1, vector<int>(n+1, -1));

        lcs(word1, word2, m, n);
        // number of operation of insertion and deletion
        int del=m-dp[m][n];
        int inse=n-dp[m][n];

        return del+inse;
    }
};
