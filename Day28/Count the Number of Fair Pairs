2563. Count the Number of Fair Pairs
//QUESTION LNK: https://leetcode.com/problems/count-the-number-of-fair-pairs/description/?envType=daily-question&envId=2025-04-19

TOPIC: Array
Two Pointers
Binary Search
Sorting


CODE:

////////////////////////////////  brute force ////////////

// TC : 2^n
// SC : O(1)
// class Solution {
// public:
//     long long countFairPairs(vector<int>& nums, int lower, int upper) {
    //     int n = nums.size();
    //     int count=0;
    //     int r=0;
    //     for(int l=0; l<n; l++){
    //         for(int r=1; r<n; r++){
    //             if(lower<=nums[l]+nums[r] && nums[l]+nums[r]<=upper && l<r) count ++;
    //         }
    //     }
    //     return count;
//     }
// };

//////////////////  optimal approach ///////////
// TC: O(n log n)
// SC: o(n)

    class Solution {
public:
    long long countFairPairs(vector<int>& nums, int lower, int upper) {
        sort(nums.begin(), nums.end());
        return lower_bound(nums, upper + 1) - lower_bound(nums, lower);
    }

private:
    long long lower_bound(vector<int>& nums, int value) {
        int left = 0, right = nums.size() - 1;
        long long result = 0;
        while (left < right) {
            int sum = nums[left] + nums[right];
            // If sum is less than value, add the size of window to result and
            // move to the next index.
            if (sum < value) {
                result += (right - left);
                left++;
            } else {
                // Otherwise, shift the right pointer backwards, until we get a
                // valid window.
                right--;
            }
        }
        return result;
    }
};

